#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Hardcode
Input = Stream
Parser = SLR
#RegularDefinitions
d : [0-9]
l : [a-zA-Z]
comentario : %.*\n
ws : [\n\s\r\t]
#Tokens
 : {comentario}|{ws}
DEC : DECLARACOES
ALG : ALGORITMO
INT : INTEIRO
REA : REAL
ATR : ATRIBUIR
A : A
LER : LER
IMP : IMPRIMIR
SE : SE
ENT : ENTAO
ENQ : ENQUANTO
INI : INICIO
FIM : FIM
Delim : :
AP : \(
FP : \)
NumI : {d}+
NumR : {d}+,{d}+
OpArit : (\*|/|\+|\-)
OpRel : (<|<=|>=|>|=|<>)
OpBool : (E|OU)
Var : [a-z]({d}|{l})*
Str : \"(.*)\"
#NonTerminals
<PROGRAMA>

<BLOCO_DECL>
<DECLARACAO>
<TIPO>

<BLOCO_ALGO>
<ALGORITMO>
<BLOCO_INST>
<INSTRUCAO>
<ESCOPO>

<ENTRADA>
<ATRIBUICAO>
<CONDICIONAL>
<LOOP>
<SAIDA>

<EXPR_ARIT>
<EXPR_ARIT_FP>
<OP_ARIT>

<EXPR_REL>
<OP_REL>

<EXPR_BOOL>
<EXPR_BOOL_FP>
<OP_BOOL>

<CONDICAO>
<TERMO>

#Grammar
<PROGRAMA> ::= <BLOCO_DECL> <BLOCO_ALGO>;
//Bloco de DECLARACOES
<BLOCO_DECL> ::= Delim DEC <DECLARACAO>;
<DECLARACAO> ::= Var Delim <TIPO> <DECLARACAO> | Var Delim <TIPO>;
<TIPO> ::= INT | REA;
//Bloco de ALGORITMO
<BLOCO_ALGO> ::= Delim ALG <ALGORITMO>;
<ALGORITMO> ::= <BLOCO_INST>;
<BLOCO_INST> ::= <INSTRUCAO> | <INSTRUCAO> <BLOCO_INST>;
<INSTRUCAO> ::= <ENTRADA>
              | <ATRIBUICAO>
              | <CONDICIONAL>
              | <LOOP>
              | <SAIDA>;
<ESCOPO> ::= INI <BLOCO_INST> FIM;
//Instruções permitidas
<ENTRADA> ::= LER Var;
<ATRIBUICAO> ::= ATR <TERMO> A Var
               | ATR <EXPR_ARIT> A Var
               | ATR Var A Var;
<CONDICIONAL> ::= SE <CONDICAO> ENT <ESCOPO>
                | SE <CONDICAO> ENT <INSTRUCAO>;
<LOOP> ::= ENQ <CONDICAO> <ESCOPO>;
<SAIDA> ::= IMP <TERMO> | IMP <EXPR_ARIT> | IMP Var | IMP Str;
//Expressoes permitidas (aritmetica, relacional e booleana)
<EXPR_ARIT> ::= <TERMO> <OP_ARIT>
              | Var <OP_ARIT>
              | AP <EXPR_ARIT_FP>;
<EXPR_ARIT_FP> ::= <EXPR_ARIT> FP
                 | <EXPR_ARIT> FP <OP_ARIT>;
<OP_ARIT> ::= OpArit <EXPR_ARIT> | OpArit <TERMO> | OpArit Var;

<EXPR_REL> ::= <TERMO> <OP_REL> | Var <OP_REL> | <EXPR_ARIT> <OP_REL>;
<OP_REL> ::= OpRel <TERMO> | OpRel Var | OpRel <EXPR_ARIT>;

<EXPR_BOOL> ::= Var <OP_BOOL>
              | <EXPR_REL> <OP_BOOL>
              | Str <OP_BOOL>
              | AP <EXPR_BOOL_FP>;
<EXPR_BOOL_FP> ::= <EXPR_BOOL> FP
                 | <EXPR_BOOL> FP <OP_BOOL>;
<OP_BOOL> ::= OpBool <EXPR_BOOL> | OpBool Var
            | OpBool <EXPR_REL> | OpBool Str;

<CONDICAO> ::= <EXPR_REL> | <EXPR_BOOL>;
<TERMO> ::= NumI | NumR;
